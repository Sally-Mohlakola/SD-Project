import {useEffect, useState} from "react";
import {collection, getDocs} from "firebase/firestore";
import {db} from "../config/firebase"; // adjust path to your firebase config

export const MyOrders = () => {
  const currentUserId = localStorage.getItem("userid");
  const [productsMap, setProductsMap] = useState([]);

  const shopcollectionRef = collection(db, "Shops");

  //Get products assosciated with shop ID (autogenerated in firebase, so userID->shopID)
  const getProductsInShop = async (shopid) => {
    try {
      const getProducts = collection(db, "Shops", shopid, "Products");
      const products = await getDocs(getProducts);
      const AllProducts = products.docs.map((doc) => ({...doc.data()} ));
      return AllProducts;
    } 
    catch (error) {
      console.error("ERROR getting products: ", error);
      return [];
    }
  };

  const downloadCSVFIle = () => {
      if (sortedProductsBySold.length===0) return;
    
      const fields = Object.keys(sortedProductsBySold[0]);
      const csvFields = [
      fields.join(","), // Field rows (according to database)
      ...sortedProductsBySold.map(product =>fields.map(field => `"${product[field]}"`).join(","))]; // split each entry onto own line
            //wrap all fields in "...field..." to avoid ambiguity

      const csvFile = csvFields.join("\n");
      const blob = new Blob([csvFile], { type:"text/csv;charset=utf-8;" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = "report_trends.csv";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    };
    

  // Get all db shops, find this user's shop (userID->shopID), then get its products
  useEffect(() => {
    const fetchUserShopProducts = async () => {
      try {
        const allShops = await getDocs(shopcollectionRef);
        const userShop = allShops.docs.filter((doc) => doc.data().userid === currentUserId);

        if (userShop.length > 0) {
          const shopId = userShop[0].id; // 1 shop per user
          const products = await getProductsInShop(shopId);
          setProductsMap(products);
        } else {
          console.error("ERROR bcos no shops this user.");
        }
      }
      catch (error) {
        console.error("ERROR getting this shop or products:", error);
      }
    };

      fetchUserShopProducts();}, [currentUserId]);

      //IMP: Sort products by sold then by price (display in descending order)
  const sortedProductsBySold= productsMap.sort((a,b)=> {
      if (a.sold === b.sold){
      return b.price - a.price;
      }
      return b.sold - a.sold;
  } );

  return (
    <section>
      <h2>My Orders</h2>
      <ul>
        {sortedProductsBySold.map((product) => (
      <li key={product.id}>
      {product.name}, {product.price}, {product.sold}
      </li>))} {/*style later*/}
      </ul>
      <button onClick={downloadCSVFIle}>Download Trend Report</button>
    </section>
  );
};//END OF COMPONENT
