import{ useState,useEffect } from 'react';
//import { useNavigate } from "react-router-dom";
//import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import '../styles/searchTab.css'; // from styles folder, import searchTab.css
import {db} from "../config/firebase";
import {getDocs,collection,updateDoc,doc} from "firebase/firestore";
import { useNavigate } from 'react-router-dom';
import React from 'react';
 
export const getProductsInShop = async (shopid) => {
  try {
    const getProducts = collection(db, "Shops", shopid, "Products");
    const products = await getDocs(getProducts);
    const AllProducts = products.docs.map((doc) => ({id: doc.id,...doc.data()} ));
    return AllProducts;
  } 
  catch (error) {
    console.error("ERROR getting products: ", error);
    return [];
  }
};

export const MyOrders =()=>{
const [orderlist,setorderlist]=useState([]);
const currentUserId = localStorage.getItem("userid");
const currentuserstore= localStorage.getItem("shopname");
const ordercollectionRef=collection(db,"Orders");
const shopcollectionRef=collection(db,"Shops");
const [productsMap, setProductsMap] = useState([]);

 let navigate=useNavigate();
    
    function navigateDashboard() {
        navigate('/shopdashboard');
        }

//console.log( "shopname of user ",currentuserstore);
useEffect(()=>{
    const getorderlist= async()=>{
        try{
        const data=await getDocs(ordercollectionRef);
        const filterddata = await Promise.all( 
            data.docs.map(async(doc) =>{
            const orderData = doc.data();
            const productsSnapshot = await getDocs(collection(doc.ref, "Products"));
            const products = productsSnapshot.docs.map((itemDoc) => itemDoc.data());
            return({
            orderid:doc.id,
            ...orderData,
            nameofshop: doc.data().nameofshop,
            address: doc.data().address,
            status: doc.data().status,
          
            products: products
        });
        })
      );
        setorderlist(filterddata);
        }catch(err){
            console.error(err);
        }
    };
    getorderlist();
},[]);
console.log(orderlist);
////////////////////////////////////////////////////////////////
  //Get products assosciated with shop ID (autogenerated in firebase, so userID->shopID)
  getProductsInShop(currentUserId);

  const downloadCSVFIle = () => {
    if (sortedProductsBySold.length===0) return;
  
    const fields = Object.keys(sortedProductsBySold[0]);
    const csvFields = [
    fields.join(","), // Field rows (according to database)
    ...sortedProductsBySold.map(product =>fields.map(field => `"${product[field]}"`).join(","))]; // split each entry onto own line
          //wrap all fields in "...field..." to avoid ambiguity

    const csvFile = csvFields.join("\n");
    const blob = new Blob([csvFile], { type:"text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "report_trends.csv";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };
  // Get all db shops, find this user's shop (userID->shopID), then get its products
  useEffect(() => {
    const fetchUserShopProducts = async () => {
      try {
        const allShops = await getDocs(shopcollectionRef);
        const userShop = allShops.docs.filter((doc) => doc.data().userid === currentUserId);

        if (userShop.length > 0) {
          const shopId = userShop[0].id; // 1 shop per user
          const products = await getProductsInShop(shopId);
          setProductsMap(products);
        } else {
          console.error("ERROR bcos no shops this user.");
        }
      }
      catch (error) {
        console.error("ERROR getting this shop or products:", error);
      }
    };

      fetchUserShopProducts();}, [currentUserId]);


  
      //IMP: Sort products by sold then by price (display in descending order)
      const sortedProductsBySold= productsMap.sort((a,b)=> {
        if (a.sold === b.sold){
        return b.price - a.price;
        }
        return b.sold - a.sold;
    } );
  
  /////////////////////////////////////////////////////////////////
const myorders = orderlist.filter((order) => order.nameofshop===currentuserstore);

const [orderstatus,setorderstatus]=useState("");
const [pressed,setpressed]=useState(false);



const updatestatus=async (ordid)=>{
      try{
      setpressed(false);
      console.log(orderstatus,ordid);
      const orderRef = doc(db, "Orders", ordid); 
      await updateDoc(orderRef, {
            status: orderstatus
            
      })
 
     }catch(err){
            console.error(err);
      }
      };

  const [editingOrderid, setEditingOrderid] = useState(null);


    return(

      <section>
        
       <h2>My Orders</h2>
       <button onClick={navigateDashboard}>‚Üê Dashboard</button>
       {myorders.map((ord,index)=>(
            
             <section key={index}>
                    <li>  {ord.products.map((prod, index2) => (
                  <section key={index2}>
                        <p>Name:{prod.nameofitem}</p>
                        <p>Quantity:{prod.quantity}</p>
                        <p>R{prod.price}</p>
                  </section>       ))}
                  </li> 
                  <p>Address:{ord.address}</p>
                  
                   {ord.orderid===editingOrderid? (
                        <section>
                        <select onChange={(e)=> setorderstatus(e.target.value)}>
                              <option>Delivery ready</option>
                             <option>Dispatched</option>
                             <option>Ordered</option>
                        </select>
                        <button onClick={() => {
                              updatestatus(ord.orderid);
                              ord.status=orderstatus;
                              setEditingOrderid(null);
                                       }}>Save</button>
                        
                         </section>
                   ) :(
                  <>
                  <p>Status: {ord.status}
                  <button onClick={()=>{setEditingOrderid(ord.orderid);}}>  Update status</button> </p>
                      
    
                   </>
                   )}
                  
              
                  
                       
             </section> ))}
             <section>      <ul>
        {sortedProductsBySold.map((product) => (
      <li key={product.id}>
      {product.name}, {product.price}, {product.sold}
      </li>))} {/*style later*/}
      </ul>
      <button onClick={downloadCSVFIle}>Download Trend Report</button>
   </section>
     
       </section>
  
    );
   };