import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../styles/searchTab.css'; // from styles folder, import searchTab.css
import { db } from "../config/firebase";
import { getDocs, collection, updateDoc, doc } from "firebase/firestore";
import { useNavigate } from 'react-router-dom';
import React from 'react';
import { getFunctions, httpsCallable } from 'firebase/functions';

export const getProductsInShop = async (shopid) => {
  try {
    const getProducts = collection(db, "Shops", shopid, "Products");
    const products = await getDocs(getProducts);
    const AllProducts = products.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
    return AllProducts;
  } catch (error) {
    console.error("ERROR getting products: ", error);
    return [];
  }
};

export const MyOrders = () => {
  const [orderlist, setorderlist] = useState([]);
  const currentUserId = localStorage.getItem("userid");
  const currentuserstore = localStorage.getItem("shopname");
  const ordercollectionRef = collection(db, "Orders");
  const shopcollectionRef = collection(db, "Shops");
  const [productsMap, setProductsMap] = useState([]);

  let navigate = useNavigate();

  function navigateDashboard() {
    navigate('/shopdashboard');
  }

  // Get all orders
  useEffect(() => {
    const fetchOrders = async () => {
      try {
        const functions = getFunctions();
        const getOrders = httpsCallable(functions, 'getOrders');
        const result = await getOrders({});
        setorderlist(result.data.orders);
      } catch (error) {
        console.error('Error fetching orders:', error);
      }
    };
    
    fetchOrders();
    
  }, []);


  // Get products assosciated with shop ID (autogenerated in firebase, so userID->shopID)
  getProductsInShop(currentUserId);

  const downloadCSVFIle = () => {
    if (sortedProductsBySold.length === 0) return;

    const fields = Object.keys(sortedProductsBySold[0]);
    const csvFields = [
      fields.join(","), // Field rows (according to database)
      ...sortedProductsBySold.map(product => fields.map(field => `"${product[field]}"`).join(","))]; // split each entry onto own line
    //wrap all fields in "...field..." to avoid ambiguity

    const csvFile = csvFields.join("\n");
    const blob = new Blob([csvFile], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "report_trends.csv";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Get all db shops, find this user's shop (userID->shopID), then get its products
  useEffect(() => {
    const fetchUserShopProducts = async () => {
      try {
        const functions = getFunctions();
        const getAllShops = httpsCallable(functions, 'getAllShops');
        const result = await getAllShops({});
        const userShop=(result.data.shops).filter(shop => shop.userid === currentUserId);
        if (userShop.length > 0) {
          const shopId = userShop[0].id; // 1 shop per user
          const products = await getProductsInShop(shopId);
          setProductsMap(products);
        } else {
          console.error("ERROR bcos no shops this user.");
        }
      }
      catch (error) {
        console.error("ERROR getting this shop or products:", error);
      }
    };

    fetchUserShopProducts();
  }, [currentUserId]);

  //IMP: Sort products by sold then by price (display in descending order)
  const sortedProductsBySold = productsMap.sort((a, b) => {
    if (a.sold === b.sold) {
      return b.price - a.price;
    }
    return b.sold - a.sold;
  });

  const myorders = orderlist.filter((order) => order.nameofshop === currentuserstore);

  const [orderstatus, setorderstatus] = useState("");
  const [editingOrderid, setEditingOrderid] = useState(null);

  const updatestatus = async (ordid) => {
    try {
      console.log(orderstatus, ordid);
      const orderRef = doc(db, "Orders", ordid);
      await updateDoc(orderRef, {
        status: orderstatus
      });
      
      // Update the local state to reflect the change
      setorderlist(prevOrders => 
        prevOrders.map(order => 
          order.orderid === ordid ? { ...order, status: orderstatus } : order
        )
      );
      
      setEditingOrderid(null);
      setorderstatus("");
    } catch (err) {
      console.error(err);
    }
  };

  return (
    
    <section>
      <h2>My Orders</h2>
      <button onClick={navigateDashboard}>‚Üê Dashboard</button>
      {myorders.map((ord, index) => (
        <section key={index}>
          <h3>Order #{index + 1}</h3>

          {ord.products.map((prod, index2) => (
            <section key={index2}>
              <p><strong>Name:</strong> {prod.nameofitem}</p>
              <p><strong>Quantity:</strong> {prod.quantity}</p>
              <p><strong>Price</strong>R{prod.price}</p>
            </section>
          ))}

          <p><strong>Address: </strong>{ord.address}</p>

          {ord.orderid === editingOrderid ? (
            <section>
              <select 
                value={orderstatus}
                onChange={(e) => setorderstatus(e.target.value)}
              >
                <option value="" disabled>New Status</option>
                <option value="Ordered">Ordered</option>
                <option value="Dispatched">Dispatched</option>
                <option value="Delivery ready">Delivery ready</option>
              </select>
              <button onClick={() => updatestatus(ord.orderid)}>
                Save
              </button>
              <button onClick={() => setEditingOrderid(null)}>
                Cancel
              </button>
            </section>
          ) : (
            <>
              <p>
              <strong>Status:</strong> {ord.status}
                <button onClick={() => {
                  setEditingOrderid(ord.orderid);
                  setorderstatus(ord.status);
                }}>
                  Update status
                </button>
              </p>
            </>
          )}
        </section>
      ))}

      <section>
        {/*<ul>
          {sortedProductsBySold.map((product) => (
            <p key={product.id}>
              {product.name}, {product.price}, {product.sold}
            </p>
          ))}
        </ul>
        <button onClick={downloadCSVFIle}>Download Trend Report</button>*/}
      </section>
    </section>
  );
};